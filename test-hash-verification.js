const mysql = require('mysql2/promise');
const crypto = require('crypto');

const dbConfig = {
  host: 'localhost',
  user: 'root',
  password: 'Admin2024@',
  database: 'cloudmasters',
  charset: 'utf8mb4'
};

async function testHashVerification() {
  console.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π...\n');
  
  try {
    const connection = await mysql.createConnection(dbConfig);
    console.log('‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [users] = await connection.execute(`
      SELECT member_id, name, email, members_pass_hash, members_pass_salt 
      FROM cldmembers WHERE email = ?
    `, ['test@example.com']);
    
    if (users.length === 0) {
      console.log('‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    const user = users[0];
    console.log('‚úì –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:');
    console.log(`  ID: ${user.member_id}`);
    console.log(`  –ò–º—è: ${user.name}`);
    console.log(`  Email: ${user.email}`);
    console.log(`  –•–µ—à –≤ –ë–î: ${user.members_pass_hash}`);
    console.log(`  –°–æ–ª—å: ${user.members_pass_salt}`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–∞—Ä–æ–ª–∏
    const testPasswords = [
      'testpass123',
      'password123',
      'test',
      '123456',
      'admin'
    ];
    
    console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è:');
    
    for (const password of testPasswords) {
      const hashedPassword = crypto.createHash('md5').update(password + user.members_pass_salt).digest('hex');
      const matches = hashedPassword === user.members_pass_hash;
      
      console.log(`\n–ü–∞—Ä–æ–ª—å: "${password}"`);
      console.log(`  –í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π —Ö–µ—à: ${hashedPassword}`);
      console.log(`  –°–æ–≤–ø–∞–¥–∞–µ—Ç: ${matches ? '‚úì' : '‚úó'}`);
      
      if (matches) {
        console.log('üéâ –ù–∞–π–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å!');
        break;
      }
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
    const [importedUsers] = await connection.execute(`
      SELECT member_id, name, email, members_pass_hash, members_pass_salt 
      FROM cldmembers WHERE email = ?
    `, ['antorlov@mail.ru']);
    
    if (importedUsers.length > 0) {
      const importedUser = importedUsers[0];
      console.log(`\n–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${importedUser.name}`);
      console.log(`–•–µ—à: ${importedUser.members_pass_hash}`);
      console.log(`–°–æ–ª—å: ${importedUser.members_pass_salt}`);
      
      for (const password of testPasswords) {
        const hashedPassword = crypto.createHash('md5').update(password + importedUser.members_pass_salt).digest('hex');
        const matches = hashedPassword === importedUser.members_pass_hash;
        
        console.log(`\n–ü–∞—Ä–æ–ª—å: "${password}"`);
        console.log(`  –í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π —Ö–µ—à: ${hashedPassword}`);
        console.log(`  –°–æ–≤–ø–∞–¥–∞–µ—Ç: ${matches ? '‚úì' : '‚úó'}`);
        
        if (matches) {
          console.log('üéâ –ù–∞–π–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å!');
          break;
        }
      }
    }
    
    await connection.end();
    console.log('\n‚úì –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

testHashVerification();



