#!/usr/bin/env node

const mysql = require('mysql2/promise');
const fs = require('fs').promises;
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –Ω–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const cloudmastersConfig = {
  host: 'localhost',
  user: 'root',
  password: 'Admin2024@',
  database: 'cloudmasters',
  charset: 'utf8mb4'
};

class DumpImporter {
  constructor() {
    this.cmConnection = null;
    this.stats = {
      users: { imported: 0, errors: 0 },
      groups: { imported: 0, errors: 0 },
      forums: { imported: 0, errors: 0 },
      topics: { imported: 0, errors: 0 },
      posts: { imported: 0, errors: 0 }
    };
  }

  async connect() {
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ CloudMasters –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
      this.cmConnection = await mysql.createConnection(cloudmastersConfig);
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
      throw error;
    }
  }

  async disconnect() {
    if (this.cmConnection) await this.cmConnection.end();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
  }

  async createTempDatabase() {
    console.log('\nüóÑÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await this.cmConnection.execute('CREATE DATABASE IF NOT EXISTS ipb_temp CHARACTER SET utf8 COLLATE utf8_general_ci');
      console.log('‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–∞–∑—ã:', error.message);
      throw error;
    }
  }

  async importDump(dumpPath) {
    console.log(`\nüì• –ò–º–ø–æ—Ä—Ç –¥–∞–º–ø–∞ –∏–∑ —Ñ–∞–π–ª–∞: ${dumpPath}`);
    
    try {
      // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∞–º–ø–∞
      const dumpContent = await fs.readFile(dumpPath, 'utf8');
      
      // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
      const queries = dumpContent
        .split(';')
        .map(query => query.trim())
        .filter(query => query.length > 0 && !query.startsWith('--'));
      
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${queries.length} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–∞–º–ø–µ`);
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã
      for (let i = 0; i < queries.length; i++) {
        const query = queries[i];
        if (query.trim()) {
          try {
            await this.cmConnection.execute(query);
            if (i % 100 === 0) {
              console.log(`  ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ ${i + 1}/${queries.length} –∑–∞–ø—Ä–æ—Å–æ–≤`);
            }
          } catch (error) {
            console.error(`  ‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ ${i + 1}:`, error.message);
          }
        }
      }
      
      console.log('‚úÖ –î–∞–º–ø –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–º–ø–∞:', error.message);
      throw error;
    }
  }

  async analyzeImportedData() {
    console.log('\nüîç –ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É
      await this.cmConnection.execute('USE ipb_temp');
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
      const [tables] = await this.cmConnection.execute('SHOW TABLES');
      console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:');
      tables.forEach(table => {
        const tableName = Object.values(table)[0];
        console.log(`  - ${tableName}`);
      });
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
      const keyTables = ['cldmembers', 'cldmember_groups', 'cldforums', 'cldtopics', 'cldposts'];
      
      for (const tableName of keyTables) {
        try {
          const [count] = await this.cmConnection.execute(`SELECT COUNT(*) as count FROM ${tableName}`);
          console.log(`  üìä ${tableName}: ${count[0].count} –∑–∞–ø–∏—Å–µ–π`);
        } catch (error) {
          console.log(`  ‚ùå –¢–∞–±–ª–∏—Ü–∞ ${tableName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        }
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö:', error.message);
    }
  }

  async migrateData() {
    console.log('\nüîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ CloudMasters...');
    
    try {
      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –º–µ–∂–¥—É –±–∞–∑–∞–º–∏
      await this.cmConnection.execute('USE ipb_temp');
      
      // –ú–∏–≥—Ä–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      console.log('üë• –ú–∏–≥—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
      const [groups] = await this.cmConnection.execute('SELECT * FROM cldmember_groups');
      
      await this.cmConnection.execute('USE cloudmasters');
      for (const group of groups) {
        try {
          await this.cmConnection.execute(`
            INSERT IGNORE INTO member_groups (id, name, description, permissions)
            VALUES (?, ?, ?, ?)
          `, [group.id, group.name, group.description, group.permissions]);
          
          this.stats.groups.imported++;
        } catch (error) {
          this.stats.groups.errors++;
        }
      }
      
      // –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      console.log('üë§ –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
      await this.cmConnection.execute('USE ipb_temp');
      const [members] = await this.cmConnection.execute('SELECT * FROM cldmembers');
      
      await this.cmConnection.execute('USE cloudmasters');
      for (const member of members) {
        try {
          await this.cmConnection.execute(`
            INSERT IGNORE INTO members (
              id, name, members_display_name, members_l_username,
              email, member_group_id, joined, last_visit, posts,
              title, member_banned, ip_address, is_activated
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 1)
          `, [
            member.member_id, member.name, member.members_display_name,
            member.members_l_username, member.email, member.member_group_id,
            member.joined, member.last_visit, member.posts,
            member.title, member.member_banned, member.ip_address
          ]);
          
          this.stats.users.imported++;
        } catch (error) {
          this.stats.users.errors++;
        }
      }
      
      // –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ñ–æ—Ä—É–º—ã
      console.log('üí¨ –ú–∏–≥—Ä–∞—Ü–∏—è —Ñ–æ—Ä—É–º–æ–≤...');
      await this.cmConnection.execute('USE ipb_temp');
      const [forums] = await this.cmConnection.execute('SELECT * FROM cldforums');
      
      await this.cmConnection.execute('USE cloudmasters');
      for (const forum of forums) {
        try {
          await this.cmConnection.execute(`
            INSERT IGNORE INTO forum_categories (id, name, description, parent_id, position)
            VALUES (?, ?, ?, ?, ?)
          `, [forum.id, forum.name, forum.description, forum.parent_id, forum.position]);
          
          this.stats.forums.imported++;
        } catch (error) {
          this.stats.forums.errors++;
        }
      }
      
      // –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ç–µ–º—ã
      console.log('üìù –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–µ–º...');
      await this.cmConnection.execute('USE ipb_temp');
      const [topics] = await this.cmConnection.execute('SELECT * FROM cldtopics');
      
      await this.cmConnection.execute('USE cloudmasters');
      for (const topic of topics) {
        try {
          await this.cmConnection.execute(`
            INSERT IGNORE INTO forum_topics (
              id, title, forum_id, author_id, posts_count, views_count,
              is_pinned, is_locked, created_at, last_post_date
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
          `, [
            topic.tid, topic.title, topic.forum_id, topic.starter_id,
            topic.posts, topic.views, topic.pinned, topic.state,
            topic.start_date, topic.last_post
          ]);
          
          this.stats.topics.imported++;
        } catch (error) {
          this.stats.topics.errors++;
        }
      }
      
      // –ú–∏–≥—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
      console.log('üí≠ –ú–∏–≥—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π...');
      await this.cmConnection.execute('USE ipb_temp');
      const [posts] = await this.cmConnection.execute('SELECT * FROM cldposts');
      
      await this.cmConnection.execute('USE cloudmasters');
      for (const post of posts) {
        try {
          await this.cmConnection.execute(`
            INSERT IGNORE INTO forum_posts (
              id, topic_id, author_id, content, created_at, ip_address
            ) VALUES (?, ?, ?, ?, ?, ?)
          `, [
            post.pid, post.topic_id, post.author_id,
            post.post, post.post_date, post.ip_address
          ]);
          
          this.stats.posts.imported++;
          if (this.stats.posts.imported % 100 === 0) {
            console.log(`  ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${this.stats.posts.imported} —Å–æ–æ–±—â–µ–Ω–∏–π`);
          }
        } catch (error) {
          this.stats.posts.errors++;
        }
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error.message);
    }
  }

  async updateStatistics() {
    console.log('\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
    
    try {
      await this.cmConnection.execute('USE cloudmasters');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–æ—Ä—É–º–æ–≤
      await this.cmConnection.execute(`
        UPDATE forum_categories fc
        SET 
          topics_count = (SELECT COUNT(*) FROM forum_topics WHERE forum_id = fc.id),
          posts_count = (
            SELECT COUNT(*) FROM forum_posts fp
            JOIN forum_topics ft ON fp.topic_id = ft.id
            WHERE ft.forum_id = fc.id
          )
      `);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      await this.cmConnection.execute(`
        UPDATE members m
        SET posts = (
          SELECT COUNT(*) FROM forum_posts WHERE author_id = m.id
        )
      `);

      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
    }
  }

  async cleanup() {
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
      await this.cmConnection.execute('DROP DATABASE IF EXISTS ipb_temp');
      console.log('‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error.message);
    }
  }

  printStats() {
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:');
    console.log('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', this.stats.users.imported, '–∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ,', this.stats.users.errors, '–æ—à–∏–±–æ–∫');
    console.log('üë§ –ì—Ä—É–ø–ø—ã:', this.stats.groups.imported, '–∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ,', this.stats.groups.errors, '–æ—à–∏–±–æ–∫');
    console.log('üí¨ –§–æ—Ä—É–º—ã:', this.stats.forums.imported, '–∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ,', this.stats.forums.errors, '–æ—à–∏–±–æ–∫');
    console.log('üìù –¢–µ–º—ã:', this.stats.topics.imported, '–∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ,', this.stats.topics.errors, '–æ—à–∏–±–æ–∫');
    console.log('üí≠ –°–æ–æ–±—â–µ–Ω–∏—è:', this.stats.posts.imported, '–∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ,', this.stats.posts.errors, '–æ—à–∏–±–æ–∫');
  }

  async run(dumpPath) {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ SQL –¥–∞–º–ø–∞...\n');
    
    try {
      await this.connect();
      await this.createTempDatabase();
      await this.importDump(dumpPath);
      await this.analyzeImportedData();
      await this.migrateData();
      await this.updateStatistics();
      await this.cleanup();
      
      this.printStats();
      
      console.log('\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    } finally {
      await this.disconnect();
    }
  }
}

// –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞
async function main() {
  const dumpPath = process.argv[2] || 'imports/ipb_dump.sql';
  
  if (!dumpPath) {
    console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∞–º–ø–∞');
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node import-from-dump.js [–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É]');
    process.exit(1);
  }
  
  const importer = new DumpImporter();
  await importer.run(dumpPath);
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = DumpImporter; 