#!/usr/bin/env node

const mysql = require('mysql2/promise');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ IPB –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const ipbConfig = {
  host: 'localhost',
  user: 'root',
  password: 'Admin2024@',
  database: 'ipb_database', // –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–π IPB –±–∞–∑—ã
  charset: 'utf8mb4'
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –Ω–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const cloudmastersConfig = {
  host: 'localhost',
  user: 'root',
  password: 'Admin2024@',
  database: 'cloudmasters',
  charset: 'utf8mb4'
};

async function analyzeIPBStructure() {
  console.log('üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö IPB...\n');
  
  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ IPB –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const ipbConnection = await mysql.createConnection(ipbConfig);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    const [tables] = await ipbConnection.execute('SHOW TABLES');
    console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ IPB:');
    tables.forEach(table => {
      const tableName = Object.values(table)[0];
      console.log(`  - ${tableName}`);
    });
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    const keyTables = [
      'members', 'member_groups', 'forums', 'topics', 'posts',
      'forum_perms', 'forum_tracker', 'profile_portal'
    ];
    
    console.log('\nüîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–ª—é—á–µ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü:');
    
    for (const tableName of keyTables) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        const [columns] = await ipbConnection.execute(`DESCRIBE ${tableName}`);
        
        if (columns.length > 0) {
          console.log(`\nüìä –¢–∞–±–ª–∏—Ü–∞: ${tableName}`);
          console.log('  –°—Ç—Ä—É–∫—Ç—É—Ä–∞:');
          columns.forEach(col => {
            console.log(`    - ${col.Field}: ${col.Type} ${col.Null === 'YES' ? 'NULL' : 'NOT NULL'} ${col.Key ? `(${col.Key})` : ''}`);
          });
          
          // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
          const [count] = await ipbConnection.execute(`SELECT COUNT(*) as count FROM ${tableName}`);
          console.log(`  –ó–∞–ø–∏—Å–µ–π: ${count[0].count}`);
        }
      } catch (error) {
        console.log(`  ‚ùå –¢–∞–±–ª–∏—Ü–∞ ${tableName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }
    }
    
    // –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüë• –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    try {
      const [members] = await ipbConnection.execute(`
        SELECT 
          COUNT(*) as total_users,
          COUNT(CASE WHEN member_group_id = 4 THEN 1 END) as admins,
          COUNT(CASE WHEN member_group_id = 3 THEN 1 END) as moderators,
          COUNT(CASE WHEN joined > 0 THEN 1 END) as active_users
        FROM members
      `);
      
      if (members.length > 0) {
        const stats = members[0];
        console.log(`  –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total_users}`);
        console.log(`  –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${stats.admins}`);
        console.log(`  –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: ${stats.moderators}`);
        console.log(`  –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.active_users}`);
      }
    } catch (error) {
      console.log('  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
    
    // –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä—É–º–∞
    console.log('\nüí¨ –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä—É–º–∞:');
    try {
      const [forumStats] = await ipbConnection.execute(`
        SELECT 
          (SELECT COUNT(*) FROM topics) as total_topics,
          (SELECT COUNT(*) FROM posts) as total_posts,
          (SELECT COUNT(*) FROM forums) as total_forums
      `);
      
      if (forumStats.length > 0) {
        const stats = forumStats[0];
        console.log(`  –í—Å–µ–≥–æ —Ç–µ–º: ${stats.total_topics}`);
        console.log(`  –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${stats.total_posts}`);
        console.log(`  –í—Å–µ–≥–æ —Ñ–æ—Ä—É–º–æ–≤: ${stats.total_forums}`);
      }
    } catch (error) {
      console.log('  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä—É–º');
    }
    
    await ipbConnection.end();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ IPB –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
    console.log('\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:');
    console.log('  - IPB –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞');
    console.log('  - –ü—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
    console.log('  - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ IPB');
  }
}

async function analyzeCloudmastersStructure() {
  console.log('\nüîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã CloudMasters –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');
  
  try {
    const cmConnection = await mysql.createConnection(cloudmastersConfig);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    const [tables] = await cmConnection.execute('SHOW TABLES');
    console.log('üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ CloudMasters:');
    tables.forEach(table => {
      const tableName = Object.values(table)[0];
      console.log(`  - ${tableName}`);
    });
    
    // –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüë• –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π CloudMasters:');
    const [members] = await cmConnection.execute(`
      SELECT 
        COUNT(*) as total_users,
        COUNT(CASE WHEN member_group_id = 4 THEN 1 END) as admins,
        COUNT(CASE WHEN member_group_id = 3 THEN 1 END) as moderators,
        COUNT(CASE WHEN member_group_id = 2 THEN 1 END) as vip_users
      FROM members
    `);
    
    if (members.length > 0) {
      const stats = members[0];
      console.log(`  –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total_users}`);
      console.log(`  –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${stats.admins}`);
      console.log(`  –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: ${stats.moderators}`);
      console.log(`  VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.vip_users}`);
    }
    
    await cmConnection.end();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ CloudMasters –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
  }
}

async function generateMappingReport() {
  console.log('\nüìã –û—Ç—á–µ—Ç –æ –º–∞–ø–ø–∏–Ω–≥–µ –ø–æ–ª–µ–π:\n');
  
  const fieldMapping = {
    'members': {
      'member_id': 'id',
      'name': 'name',
      'members_display_name': 'display_name',
      'members_l_username': 'username',
      'email': 'email',
      'member_group_id': 'member_group_id',
      'joined': 'joined',
      'last_visit': 'last_visit',
      'posts': 'posts',
      'title': 'title',
      'member_banned': 'member_banned',
      'ip_address': 'ip_address'
    },
    'member_groups': {
      'id': 'id',
      'name': 'name',
      'description': 'description',
      'permissions': 'permissions'
    },
    'forums': {
      'id': 'id',
      'name': 'name',
      'description': 'description',
      'parent_id': 'parent_id',
      'position': 'position'
    },
    'topics': {
      'tid': 'id',
      'title': 'title',
      'forum_id': 'forum_id',
      'starter_id': 'author_id',
      'posts': 'posts_count',
      'views': 'views_count',
      'pinned': 'is_pinned',
      'state': 'is_locked',
      'start_date': 'created_at',
      'last_post': 'last_post_date'
    },
    'posts': {
      'pid': 'id',
      'topic_id': 'topic_id',
      'author_id': 'author_id',
      'post': 'content',
      'post_date': 'created_at',
      'ip_address': 'ip_address'
    }
  };
  
  console.log('üîÑ –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π –º–µ–∂–¥—É IPB –∏ CloudMasters:');
  Object.entries(fieldMapping).forEach(([table, fields]) => {
    console.log(`\nüìä –¢–∞–±–ª–∏—Ü–∞: ${table}`);
    Object.entries(fields).forEach(([ipbField, cmField]) => {
      console.log(`  ${ipbField} ‚Üí ${cmField}`);
    });
  });
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');
  
  await analyzeIPBStructure();
  await analyzeCloudmastersStructure();
  await generateMappingReport();
  
  console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');
  console.log('\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤—ã—à–µ');
  console.log('  2. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –¥–∞–º–ø IPB –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  console.log('  3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö');
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  analyzeIPBStructure,
  analyzeCloudmastersStructure,
  generateMappingReport
}; 