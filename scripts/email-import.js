#!/usr/bin/env node

const mysql = require('mysql2/promise');
const fs = require('fs').promises;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –Ω–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const cloudmastersConfig = {
  host: 'localhost',
  user: 'root',
  password: 'Admin2024@',
  database: 'cloudmasters',
  charset: 'utf8mb4'
};

class EmailImporter {
  constructor() {
    this.connection = null;
    this.stats = {
      users: { imported: 0, errors: 0 }
    };
  }

  async connect() {
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    this.connection = await mysql.createConnection(cloudmastersConfig);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  }

  async disconnect() {
    if (this.connection) {
      await this.connection.end();
    }
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
  }

  async importFromDump(dumpPath) {
    console.log('üì• –ß—Ç–µ–Ω–∏–µ –¥–∞–º–ø–∞...');
    
    try {
      const dumpContent = await fs.readFile(dumpPath, 'utf8');
      
      // –ò—â–µ–º –≤—Å–µ INSERT INTO –¥–ª—è members
      const insertMatches = dumpContent.match(/INSERT INTO `cldmembers`[^;]+;/gs);
      
      if (insertMatches) {
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${insertMatches.length} INSERT –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        
        for (const insertQuery of insertMatches) {
          await this.processInsertQuery(insertQuery);
        }
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–º–ø–∞:', error.message);
      throw error;
    }
  }

  async processInsertQuery(insertQuery) {
    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ INSERT –∑–∞–ø—Ä–æ—Å–∞
      const valuesMatch = insertQuery.match(/VALUES\s*\(([^)]+)\)/);
      if (!valuesMatch) return;
      
      const valuesString = valuesMatch[1];
      
      // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, —É—á–∏—Ç—ã–≤–∞—è –∫–∞–≤—ã—á–∫–∏
      const values = this.parseValues(valuesString);
      
      if (values.length >= 4) {
        const memberId = values[0];
        const name = values[1];
        const groupId = values[2];
        const email = values[3];
        const joined = values[4];
        const posts = values[6] || 0;
        const title = values[7] || '';
        const lastVisit = values[27] || joined;
        const memberBanned = values[42] || 0;
        const displayName = values[35] || name;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ email –≤–∞–ª–∏–¥–Ω—ã–π
        if (email && email.includes('@') && email !== 'NULL') {
          await this.connection.query(`
            INSERT IGNORE INTO members (
              id, name, display_name, email, 
              joined_at, last_visit_at, group_id, is_banned,
              posts_count, title
            ) VALUES (?, ?, ?, ?, FROM_UNIXTIME(?), FROM_UNIXTIME(?), ?, ?, ?, ?)
          `, [
            memberId, 
            name, 
            displayName,
            email,
            joined,
            lastVisit,
            groupId || 2,
            memberBanned ? 1 : 0,
            posts,
            title
          ]);
          this.stats.users.imported++;
        }
      }
    } catch (error) {
      this.stats.users.errors++;
      console.log(`    ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
    }
  }

  parseValues(valuesString) {
    const values = [];
    let currentValue = '';
    let inQuotes = false;
    let quoteChar = '';
    
    for (let i = 0; i < valuesString.length; i++) {
      const char = valuesString[i];
      
      if (!inQuotes && (char === "'" || char === '"')) {
        inQuotes = true;
        quoteChar = char;
        currentValue += char;
      } else if (inQuotes && char === quoteChar) {
        inQuotes = false;
        currentValue += char;
      } else if (!inQuotes && char === ',') {
        values.push(currentValue.trim());
        currentValue = '';
      } else {
        currentValue += char;
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    if (currentValue.trim()) {
      values.push(currentValue.trim());
    }
    
    return values;
  }

  printStats() {
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:');
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${this.stats.users.imported} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ, ${this.stats.users.errors} –æ—à–∏–±–æ–∫`);
  }

  async run(dumpPath) {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ –ø–æ email...\n');
    
    try {
      await this.connect();
      await this.importFromDump(dumpPath);
      
      this.printStats();
      
      console.log('\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    } finally {
      await this.disconnect();
    }
  }
}

// –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞
async function main() {
  const dumpPath = process.argv[2] || '../imports/u3186919_test1_tower.sql';
  
  if (!dumpPath) {
    console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∞–º–ø–∞');
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node email-import.js [–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É]');
    process.exit(1);
  }
  
  const importer = new EmailImporter();
  await importer.run(dumpPath);
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = EmailImporter;
