#!/usr/bin/env node

const mysql = require('mysql2/promise');
const fs = require('fs').promises;
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ IPB –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const ipbConfig = {
  host: 'localhost',
  user: 'root',
  password: 'Admin2024@',
  database: 'ipb_database', // –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–π IPB –±–∞–∑—ã
  charset: 'utf8mb4'
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –Ω–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const cloudmastersConfig = {
  host: 'localhost',
  user: 'root',
  password: 'Admin2024@',
  database: 'cloudmasters',
  charset: 'utf8mb4'
};

class IPBImporter {
  constructor() {
    this.ipbConnection = null;
    this.cmConnection = null;
    this.stats = {
      users: { imported: 0, errors: 0 },
      groups: { imported: 0, errors: 0 },
      forums: { imported: 0, errors: 0 },
      topics: { imported: 0, errors: 0 },
      posts: { imported: 0, errors: 0 }
    };
  }

  async connect() {
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
      this.ipbConnection = await mysql.createConnection(ipbConfig);
      this.cmConnection = await mysql.createConnection(cloudmastersConfig);
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
      throw error;
    }
  }

  async disconnect() {
    if (this.ipbConnection) await this.ipbConnection.end();
    if (this.cmConnection) await this.cmConnection.end();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã');
  }

  async importMemberGroups() {
    console.log('\nüë• –ò–º–ø–æ—Ä—Ç –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –∏–∑ IPB
      const [ipbGroups] = await this.ipbConnection.execute(`
        SELECT id, name, description, permissions
        FROM member_groups
        ORDER BY id
      `);

      for (const group of ipbGroups) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥—Ä—É–ø–ø–∞
          const [existing] = await this.cmConnection.execute(
            'SELECT id FROM member_groups WHERE id = ?',
            [group.id]
          );

          if (existing.length === 0) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
            await this.cmConnection.execute(`
              INSERT INTO member_groups (id, name, description, permissions)
              VALUES (?, ?, ?, ?)
            `, [group.id, group.name, group.description, group.permissions]);
            
            this.stats.groups.imported++;
            console.log(`  ‚úÖ –ì—Ä—É–ø–ø–∞ "${group.name}" –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞`);
          } else {
            console.log(`  ‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ "${group.name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
          }
        } catch (error) {
          this.stats.groups.errors++;
          console.error(`  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≥—Ä—É–ø–ø—ã "${group.name}":`, error.message);
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –≥—Ä—É–ø–ø:', error.message);
    }
  }

  async importMembers() {
    console.log('\nüë§ –ò–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ IPB
      const [ipbMembers] = await this.ipbConnection.execute(`
        SELECT 
          member_id, name, members_display_name, members_l_username,
          email, member_group_id, joined, last_visit, posts,
          title, member_banned, ip_address
        FROM members
        ORDER BY member_id
      `);

      for (const member of ipbMembers) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
          const [existing] = await this.cmConnection.execute(
            'SELECT id FROM members WHERE id = ?',
            [member.member_id]
          );

          if (existing.length === 0) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await this.cmConnection.execute(`
              INSERT INTO members (
                id, name, members_display_name, members_l_username,
                email, member_group_id, joined, last_visit, posts,
                title, member_banned, ip_address, is_activated
              ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 1)
            `, [
              member.member_id, member.name, member.members_display_name,
              member.members_l_username, member.email, member.member_group_id,
              member.joined, member.last_visit, member.posts,
              member.title, member.member_banned, member.ip_address
            ]);
            
            this.stats.users.imported++;
            console.log(`  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${member.name}" –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω`);
          } else {
            console.log(`  ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${member.name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
          }
        } catch (error) {
          this.stats.users.errors++;
          console.error(`  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${member.name}":`, error.message);
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message);
    }
  }

  async importForums() {
    console.log('\nüí¨ –ò–º–ø–æ—Ä—Ç —Ñ–æ—Ä—É–º–æ–≤...');
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä—É–º—ã –∏–∑ IPB
      const [ipbForums] = await this.ipbConnection.execute(`
        SELECT id, name, description, parent_id, position
        FROM forums
        ORDER BY position, id
      `);

      for (const forum of ipbForums) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–æ—Ä—É–º
          const [existing] = await this.cmConnection.execute(
            'SELECT id FROM forum_categories WHERE id = ?',
            [forum.id]
          );

          if (existing.length === 0) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä—É–º
            await this.cmConnection.execute(`
              INSERT INTO forum_categories (id, name, description, parent_id, position)
              VALUES (?, ?, ?, ?, ?)
            `, [forum.id, forum.name, forum.description, forum.parent_id, forum.position]);
            
            this.stats.forums.imported++;
            console.log(`  ‚úÖ –§–æ—Ä—É–º "${forum.name}" –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω`);
          } else {
            console.log(`  ‚ö†Ô∏è –§–æ—Ä—É–º "${forum.name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
          }
        } catch (error) {
          this.stats.forums.errors++;
          console.error(`  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ñ–æ—Ä—É–º–∞ "${forum.name}":`, error.message);
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ñ–æ—Ä—É–º–æ–≤:', error.message);
    }
  }

  async importTopics() {
    console.log('\nüìù –ò–º–ø–æ—Ä—Ç —Ç–µ–º...');
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—ã –∏–∑ IPB
      const [ipbTopics] = await this.ipbConnection.execute(`
        SELECT 
          tid, title, forum_id, starter_id, posts, views,
          pinned, state, start_date, last_post
        FROM topics
        ORDER BY tid
      `);

      for (const topic of ipbTopics) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–º–∞
          const [existing] = await this.cmConnection.execute(
            'SELECT id FROM forum_topics WHERE id = ?',
            [topic.tid]
          );

          if (existing.length === 0) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É
            await this.cmConnection.execute(`
              INSERT INTO forum_topics (
                id, title, forum_id, author_id, posts_count, views_count,
                is_pinned, is_locked, created_at, last_post_date
              ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            `, [
              topic.tid, topic.title, topic.forum_id, topic.starter_id,
              topic.posts, topic.views, topic.pinned, topic.state,
              topic.start_date, topic.last_post
            ]);
            
            this.stats.topics.imported++;
            console.log(`  ‚úÖ –¢–µ–º–∞ "${topic.title}" –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞`);
          } else {
            console.log(`  ‚ö†Ô∏è –¢–µ–º–∞ "${topic.title}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
          }
        } catch (error) {
          this.stats.topics.errors++;
          console.error(`  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ç–µ–º—ã "${topic.title}":`, error.message);
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ç–µ–º:', error.message);
    }
  }

  async importPosts() {
    console.log('\nüí≠ –ò–º–ø–æ—Ä—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...');
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ IPB
      const [ipbPosts] = await this.ipbConnection.execute(`
        SELECT 
          pid, topic_id, author_id, post, post_date, ip_address
        FROM posts
        ORDER BY pid
      `);

      for (const post of ipbPosts) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
          const [existing] = await this.cmConnection.execute(
            'SELECT id FROM forum_posts WHERE id = ?',
            [post.pid]
          );

          if (existing.length === 0) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await this.cmConnection.execute(`
              INSERT INTO forum_posts (
                id, topic_id, author_id, content, created_at, ip_address
              ) VALUES (?, ?, ?, ?, ?, ?)
            `, [
              post.pid, post.topic_id, post.author_id,
              post.post, post.post_date, post.ip_address
            ]);
            
            this.stats.posts.imported++;
            if (this.stats.posts.imported % 100 === 0) {
              console.log(`  ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${this.stats.posts.imported} —Å–æ–æ–±—â–µ–Ω–∏–π`);
            }
          }
        } catch (error) {
          this.stats.posts.errors++;
          if (this.stats.posts.errors % 10 === 0) {
            console.error(`  ‚ùå –û—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: ${this.stats.posts.errors}`);
          }
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–π:', error.message);
    }
  }

  async updateStatistics() {
    console.log('\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
    
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–æ—Ä—É–º–æ–≤
      await this.cmConnection.execute(`
        UPDATE forum_categories fc
        SET 
          topics_count = (SELECT COUNT(*) FROM forum_topics WHERE forum_id = fc.id),
          posts_count = (
            SELECT COUNT(*) FROM forum_posts fp
            JOIN forum_topics ft ON fp.topic_id = ft.id
            WHERE ft.forum_id = fc.id
          )
      `);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      await this.cmConnection.execute(`
        UPDATE members m
        SET posts = (
          SELECT COUNT(*) FROM forum_posts WHERE author_id = m.id
        )
      `);

      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
    }
  }

  printStats() {
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:');
    console.log('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', this.stats.users.imported, '–∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ,', this.stats.users.errors, '–æ—à–∏–±–æ–∫');
    console.log('üë§ –ì—Ä—É–ø–ø—ã:', this.stats.groups.imported, '–∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ,', this.stats.groups.errors, '–æ—à–∏–±–æ–∫');
    console.log('üí¨ –§–æ—Ä—É–º—ã:', this.stats.forums.imported, '–∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ,', this.stats.forums.errors, '–æ—à–∏–±–æ–∫');
    console.log('üìù –¢–µ–º—ã:', this.stats.topics.imported, '–∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ,', this.stats.topics.errors, '–æ—à–∏–±–æ–∫');
    console.log('üí≠ –°–æ–æ–±—â–µ–Ω–∏—è:', this.stats.posts.imported, '–∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ,', this.stats.posts.errors, '–æ—à–∏–±–æ–∫');
  }

  async run() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ IPB...\n');
    
    try {
      await this.connect();
      
      await this.importMemberGroups();
      await this.importMembers();
      await this.importForums();
      await this.importTopics();
      await this.importPosts();
      await this.updateStatistics();
      
      this.printStats();
      
      console.log('\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    } finally {
      await this.disconnect();
    }
  }
}

// –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞
async function main() {
  const importer = new IPBImporter();
  await importer.run();
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = IPBImporter; 