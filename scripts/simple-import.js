#!/usr/bin/env node

const mysql = require('mysql2/promise');
const fs = require('fs').promises;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –Ω–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const cloudmastersConfig = {
  host: 'localhost',
  user: 'root',
  password: 'Admin2024@',
  database: 'cloudmasters',
  charset: 'utf8mb4'
};

class SimpleImporter {
  constructor() {
    this.connection = null;
    this.stats = {
      users: { imported: 0, errors: 0 },
      groups: { imported: 0, errors: 0 },
      forums: { imported: 0, errors: 0 },
      topics: { imported: 0, errors: 0 },
      posts: { imported: 0, errors: 0 }
    };
  }

  async connect() {
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    this.connection = await mysql.createConnection(cloudmastersConfig);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  }

  async disconnect() {
    if (this.connection) {
      await this.connection.end();
    }
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
  }

  async importFromDump(dumpPath) {
    console.log('üì• –ß—Ç–µ–Ω–∏–µ –¥–∞–º–ø–∞...');
    
    try {
      const dumpContent = await fs.readFile(dumpPath, 'utf8');
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–∞–º–ø–∞
      await this.extractMemberGroups(dumpContent);
      await this.extractMembers(dumpContent);
      await this.extractForums(dumpContent);
      await this.extractTopics(dumpContent);
      await this.extractPosts(dumpContent);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–º–ø–∞:', error.message);
      throw error;
    }
  }

  async extractMemberGroups(dumpContent) {
    console.log('üë§ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    try {
      // –ò—â–µ–º INSERT INTO –¥–ª—è member_groups
      const groupMatches = dumpContent.match(/INSERT INTO `cldmembers` VALUES[^;]+;/g);
      
      if (groupMatches) {
        for (const match of groupMatches) {
          try {
            // –û—á–∏—â–∞–µ–º –æ—Ç PHP —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            const cleanedMatch = match.replace(/a:\d+:\{[^}]*\}/g, 'NULL');
            await this.connection.query(cleanedMatch.replace('cldmembers', 'member_groups'));
            this.stats.groups.imported++;
          } catch (error) {
            this.stats.groups.errors++;
          }
        }
      }
      
      console.log(`  ‚úÖ –ì—Ä—É–ø–ø—ã: ${this.stats.groups.imported} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ`);
      
    } catch (error) {
      console.log('  ‚ö†Ô∏è –ì—Ä—É–ø–ø—ã: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∞–º–ø–µ');
    }
  }

  async extractMembers(dumpContent) {
    console.log('üë• –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    try {
      // –ò—â–µ–º INSERT INTO –¥–ª—è members
      const memberMatches = dumpContent.match(/INSERT INTO `cldmembers` VALUES[^;]+;/g);
      
      if (memberMatches) {
        for (const match of memberMatches) {
          try {
            // –û—á–∏—â–∞–µ–º –æ—Ç PHP —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            const cleanedMatch = match.replace(/a:\d+:\{[^}]*\}/g, 'NULL');
            await this.connection.query(cleanedMatch.replace('cldmembers', 'members'));
            this.stats.users.imported++;
          } catch (error) {
            this.stats.users.errors++;
          }
        }
      }
      
      console.log(`  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${this.stats.users.imported} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ`);
      
    } catch (error) {
      console.log('  ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∞–º–ø–µ');
    }
  }

  async extractForums(dumpContent) {
    console.log('üí¨ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–æ—Ä—É–º–æ–≤...');
    
    try {
      // –ò—â–µ–º INSERT INTO –¥–ª—è forums
      const forumMatches = dumpContent.match(/INSERT INTO `cldforums` VALUES[^;]+;/g);
      
      if (forumMatches) {
        for (const match of forumMatches) {
          try {
            // –û—á–∏—â–∞–µ–º –æ—Ç PHP —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            const cleanedMatch = match.replace(/a:\d+:\{[^}]*\}/g, 'NULL');
            await this.connection.query(cleanedMatch.replace('cldforums', 'forums'));
            this.stats.forums.imported++;
          } catch (error) {
            this.stats.forums.errors++;
          }
        }
      }
      
      console.log(`  ‚úÖ –§–æ—Ä—É–º—ã: ${this.stats.forums.imported} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ`);
      
    } catch (error) {
      console.log('  ‚ö†Ô∏è –§–æ—Ä—É–º—ã: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∞–º–ø–µ');
    }
  }

  async extractTopics(dumpContent) {
    console.log('üìù –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–º...');
    
    try {
      // –ò—â–µ–º INSERT INTO –¥–ª—è topics
      const topicMatches = dumpContent.match(/INSERT INTO `cldtopics` VALUES[^;]+;/g);
      
      if (topicMatches) {
        for (const match of topicMatches) {
          try {
            // –û—á–∏—â–∞–µ–º –æ—Ç PHP —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            const cleanedMatch = match.replace(/a:\d+:\{[^}]*\}/g, 'NULL');
            await this.connection.query(cleanedMatch.replace('cldtopics', 'topics'));
            this.stats.topics.imported++;
          } catch (error) {
            this.stats.topics.errors++;
          }
        }
      }
      
      console.log(`  ‚úÖ –¢–µ–º—ã: ${this.stats.topics.imported} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ`);
      
    } catch (error) {
      console.log('  ‚ö†Ô∏è –¢–µ–º—ã: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∞–º–ø–µ');
    }
  }

  async extractPosts(dumpContent) {
    console.log('üí≠ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...');
    
    try {
      // –ò—â–µ–º INSERT INTO –¥–ª—è posts
      const postMatches = dumpContent.match(/INSERT INTO `cldposts` VALUES[^;]+;/g);
      
      if (postMatches) {
        for (const match of postMatches) {
          try {
            // –û—á–∏—â–∞–µ–º –æ—Ç PHP —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            const cleanedMatch = match.replace(/a:\d+:\{[^}]*\}/g, 'NULL');
            await this.connection.query(cleanedMatch.replace('cldposts', 'posts'));
            this.stats.posts.imported++;
          } catch (error) {
            this.stats.posts.errors++;
          }
        }
      }
      
      console.log(`  ‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è: ${this.stats.posts.imported} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ`);
      
    } catch (error) {
      console.log('  ‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏—è: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∞–º–ø–µ');
    }
  }

  printStats() {
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:');
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${this.stats.users.imported} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ, ${this.stats.users.errors} –æ—à–∏–±–æ–∫`);
    console.log(`üë§ –ì—Ä—É–ø–ø—ã: ${this.stats.groups.imported} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ, ${this.stats.groups.errors} –æ—à–∏–±–æ–∫`);
    console.log(`üí¨ –§–æ—Ä—É–º—ã: ${this.stats.forums.imported} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ, ${this.stats.forums.errors} –æ—à–∏–±–æ–∫`);
    console.log(`üìù –¢–µ–º—ã: ${this.stats.topics.imported} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ, ${this.stats.topics.errors} –æ—à–∏–±–æ–∫`);
    console.log(`üí≠ –°–æ–æ–±—â–µ–Ω–∏—è: ${this.stats.posts.imported} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ, ${this.stats.posts.errors} –æ—à–∏–±–æ–∫`);
  }

  async run(dumpPath) {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞...\n');
    
    try {
      await this.connect();
      await this.importFromDump(dumpPath);
      
      this.printStats();
      
      console.log('\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    } finally {
      await this.disconnect();
    }
  }
}

// –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞
async function main() {
  const dumpPath = process.argv[2] || '../imports/u3186919_test1_tower.sql';
  
  if (!dumpPath) {
    console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∞–º–ø–∞');
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node simple-import.js [–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É]');
    process.exit(1);
  }
  
  const importer = new SimpleImporter();
  await importer.run(dumpPath);
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = SimpleImporter;
