import { NextRequest, NextResponse } from 'next/server';
import mysql from 'mysql2/promise';
import crypto from 'crypto';
import jwt from 'jsonwebtoken';

export async function POST(request: NextRequest) {
  try {
    if (process.env.NODE_ENV === 'development') {
      console.log('=== –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ===');
    }
    const body = await request.json();
    const { email, username, password } = body;

    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∫–∞–∫ –ø–æ email, —Ç–∞–∫ –∏ –ø–æ username
    const loginField = email || username;
    
    if (process.env.NODE_ENV === 'development') {
      console.log('–ü–æ–ª–µ –¥–ª—è –≤—Ö–æ–¥–∞:', loginField);
      console.log('–ü–∞—Ä–æ–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω:', !!password);
    }

    if (!loginField || !password) {
      console.log('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
      return NextResponse.json(
        { success: false, error: 'Email/–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 }
      );
    }

    if (process.env.NODE_ENV === 'development') {
      console.log('–ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
      console.log('Email:', email);
      console.log('–ü–∞—Ä–æ–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω:', !!password);
    }
    
    try {
      // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
      const dbConfig = {
        host: process.env.DB_HOST || 'localhost',
        user: process.env.DB_USER || 'root',
        password: process.env.DB_PASSWORD || 'Admin2024@',
        database: process.env.DB_NAME || 'cloudmasters',
        charset: process.env.DB_CHARSET || 'utf8mb4'
      };
      
      if (process.env.NODE_ENV === 'development') {
        console.log('–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î...');
      }
      const connection = await mysql.createConnection(dbConfig);
      if (process.env.NODE_ENV === 'development') {
        console.log('‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      }
      
      try {
        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email –∏–ª–∏ username
        if (process.env.NODE_ENV === 'development') {
          console.log('–ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–ª–µ–º:', loginField);
        }
        const [users] = await connection.execute(`
          SELECT * FROM cldmembers WHERE email = ? OR name = ?
        `, [loginField, loginField]) as [any[], any];

        if (process.env.NODE_ENV === 'development') {
          console.log('–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', users.length);
        }

        if (users.length === 0) {
          console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
          return NextResponse.json({ success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 401 });
        }

        const user = users[0];
        if (process.env.NODE_ENV === 'development') {
          console.log('‚úì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user.name);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É IPB 3.4
        const salt = user.members_pass_salt;
        const md5Password = crypto.createHash('md5').update(password).digest('hex');
        const md5Salt = crypto.createHash('md5').update(salt).digest('hex');
        const finalHash = crypto.createHash('md5').update(md5Salt + md5Password).digest('hex');
        
        // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
        if (process.env.NODE_ENV === 'development') {
          console.log('–•–µ—à–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç:', finalHash === user.members_pass_hash);
        }

        if (finalHash !== user.members_pass_hash) {
          console.log('‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π');
          return NextResponse.json({ success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' }, { status: 401 });
        }

        if (process.env.NODE_ENV === 'development') {
          console.log('‚úì –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω...');
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        const token = jwt.sign(
          { 
            id: user.member_id, 
            email: user.email, 
            display_name: user.members_display_name,
            group_id: user.member_group_id 
          },
          process.env.JWT_SECRET || 'cloudmasters-secret-key-2024',
          { expiresIn: '7d' }
        );

        if (process.env.NODE_ENV === 'development') {
          console.log('‚úì –¢–æ–∫–µ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        const now = Math.floor(Date.now() / 1000);
        await connection.execute(`
          UPDATE cldmembers SET last_activity = ?, last_visit = ? WHERE member_id = ?
        `, [now, now, user.member_id]);

        if (process.env.NODE_ENV === 'development') {
          console.log('‚úì –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
          console.log('üéâ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
        }
        
        return NextResponse.json({
          success: true,
          user: {
            id: user.member_id,
            name: user.name,
            email: user.email,
            members_display_name: user.members_display_name,
            member_group_id: user.member_group_id,
            is_activated: user.member_group_id > 0
          },
          token: token
        });

      } finally {
        await connection.end();
        if (process.env.NODE_ENV === 'development') {
          console.log('‚úì –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
        }
      }

    } catch (loginError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', loginError);
      console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', loginError.stack);
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' },
        { status: 401 }
      );
    }
  } catch (error) {
    console.error('Login API error:', error);
    return NextResponse.json(
      { success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
} 