import nodemailer from 'nodemailer';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SMTP
const transporter = nodemailer.createTransport({
  host: process.env.SMTP_HOST || 'localhost',
  port: parseInt(process.env.SMTP_PORT || '25'),
  secure: parseInt(process.env.SMTP_PORT || '25') === 465, // true –¥–ª—è 465, false –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ—Ä—Ç–æ–≤
  auth: process.env.SMTP_USER && process.env.SMTP_PASS ? {
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS,
  } : undefined,
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
export async function sendActivationEmail(email: string, username: string, activationCode: string) {
  const activationLink = `${process.env.NEXT_PUBLIC_BASE_URL || 'http://89.111.170.207'}/auth/activate?code=${activationCode}&email=${encodeURIComponent(email)}`;
  
  const mailOptions = {
    from: `"CloudMasters" <${process.env.SMTP_USER || 'admin@cloudmasters.ru'}>`,
    to: email,
    subject: '–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ - CloudMasters',
    html: `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞</title>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
          .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }
          .button { display: inline-block; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; margin: 20px 0; }
          .footer { text-align: center; margin-top: 30px; color: #666; font-size: 12px; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CloudMasters!</h1>
          </div>
          <div class="content">
            <h2>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${username}!</h2>
            <p>–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ CloudMasters. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.</p>
            
            <p><strong>–ö–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</strong> <span style="font-size: 18px; font-weight: bold; color: #667eea;">${activationCode}</span></p>
            
            <p>–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</p>
            
            <div style="text-align: center;">
              <a href="${activationLink}" class="button">–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç</a>
            </div>
            
            <p>–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä:</p>
            <p style="word-break: break-all; background: #f0f0f0; padding: 10px; border-radius: 5px; font-size: 12px;">${activationLink}</p>
            
            <p><strong>–í–Ω–∏–º–∞–Ω–∏–µ:</strong> –ö–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.</p>
          </div>
          <div class="footer">
            <p>–≠—Ç–æ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –Ω–µ–≥–æ.</p>
            <p>¬© 2024 CloudMasters. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
          </div>
        </div>
      </body>
      </html>
    `,
  };

  try {
    await transporter.sendMail(mailOptions);
    console.log(`Email –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${email}`);
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
export async function sendPasswordResetEmail(email: string, username: string, resetCode: string) {
  const resetLink = `${process.env.NEXT_PUBLIC_BASE_URL || 'http://89.111.170.207'}/auth/reset-password?code=${resetCode}&email=${encodeURIComponent(email)}`;
  
  const mailOptions = {
    from: `"CloudMasters" <${process.env.SMTP_USER || 'admin@cloudmasters.ru'}>`,
    to: email,
    subject: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è - CloudMasters',
    html: `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</title>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
          .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }
          .button { display: inline-block; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; margin: 20px 0; }
          .footer { text-align: center; margin-top: 30px; color: #666; font-size: 12px; }
          .warning { background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; margin: 20px 0; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>üîê –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</h1>
          </div>
          <div class="content">
            <h2>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${username}!</h2>
            <p>–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ CloudMasters.</p>
            
            <p><strong>–ö–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:</strong> <span style="font-size: 18px; font-weight: bold; color: #667eea;">${resetCode}</span></p>
            
            <p>–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –ø–∞—Ä–æ–ª—è:</p>
            
            <div style="text-align: center;">
              <a href="${resetLink}" class="button">–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å</a>
            </div>
            
            <p>–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä:</p>
            <p style="word-break: break-all; background: #f0f0f0; padding: 10px; border-radius: 5px; font-size: 12px;">${resetLink}</p>
            
            <div class="warning">
              <p><strong>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:</strong></p>
              <ul>
                <li>–ö–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞</li>
                <li>–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ</li>
                <li>–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –∫–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º</li>
              </ul>
            </div>
          </div>
          <div class="footer">
            <p>–≠—Ç–æ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –Ω–µ–≥–æ.</p>
            <p>¬© 2024 CloudMasters. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
          </div>
        </div>
      </body>
      </html>
    `,
  };

  try {
    await transporter.sendMail(mailOptions);
    console.log(`Email –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${email}`);
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ–¥–∞
export function generateCode(length: number = 6): string {
  const chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  let result = '';
  for (let i = 0; i < length; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
} 